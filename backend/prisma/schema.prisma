generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(cuid())
  firstName      String?
  lastName       String?
  email          String  @unique
  hashedPassword String?
  googleId       String? @unique
  avatarUrl      String?

  // Stripe fields
  stripeCustomerId    String?           @unique
  connectedAccountId     String?           @unique
  isOnboarded Boolean @default(false)

  // Password reset fields
  resetPasswordToken    String?   @db.VarChar(64)
  resetTokenExpiresAt   DateTime?
  passwordLastChangedAt DateTime?

  // Database Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Associations
  subscriptions Subscription[]
  transactions  Transaction[]
  activities Activity[]
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  stripeSubscriptionId String             @unique
  plan                 String
  status              String @default("active")
  startDate            DateTime
  endDate              DateTime
  cancelAtPeriodEnd    Boolean            @default(false)

  // Associations
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  // DB Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id            String                   @id @default(cuid())
  userId        String
  type          String
  amount        Float
  // paymentMethod TransactionPaymentMethod

  // Was the transaction a subscription?
  subscriptionId String?
  stripeChargeId String?

  // Was the item a refund?
  refundedAt DateTime?
  refundReason String?

  // Associations
  user         User          @relation(fields: [userId], references: [id])
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  // DB Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  action String
  metadata Json?
  targetType String // payment, client, file, etc
  targetId String? // e.g. record subscription, provide sub_id
  createdAt DateTime @default(now())

  @@index([userId])
}

// enum SubscriptionStatus {
//   Active
//   Canceled
// }

// enum SubscriptionPlan {
//   SonExperience
//   SonExplorer
//   SonExsphere
// }

// enum TransactionType {
//   Subscription
//   Refund
//   ClientPayment
//   Other
// }

// enum TransactionPaymentMethod {
//   Card // includes debit and credit
//   Cash
//   Peer // cashapp, venmo, paypal, etc.
//   Bank // square, wave, squarespace/website, bank transfer
//   Check
//   Other // any other service not mentioned/ foreign payment
// }
